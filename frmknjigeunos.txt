using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.OleDb;

namespace B15_Biblioteka
{
    public partial class frmKnjigeUnos : Form
    {
        public frmKnjigeUnos()
        {
            InitializeComponent();
        }

        private void FrmKnjigeUnos_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'skolskaBibliotekaDataSet.Knjiga' table. You can move, or remove it, as needed.
            this.knjigaTableAdapter.Fill(this.skolskaBibliotekaDataSet.Knjiga);
        }

        private void BtnIzadji_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void BtnUpisi_Click(object sender, EventArgs e)
        {
            short sifra;
            if (!short.TryParse(txtSifra.Text, out sifra) || sifra < 0)
            {
                Util.Error("Neodgovarajuca sifra.");
                txtSifra.Focus();
                txtSifra.SelectAll();
                return;
            }

            SkolskaBibliotekaDataSet.KnjigaRow knjiga1 = skolskaBibliotekaDataSet.Knjiga.FindByKnjigaID(sifra);
            
            if (knjiga1 != null)
            {
                // var b = knjiga1.UDK;
                txtUDK.Text = knjiga1.IsUDKNull() ? "" : knjiga1.UDK;
                txtISBN.Text = knjiga1.IsISBNNull() ? "" : knjiga1.ISBN;
                txtNaziv.Text = knjiga1.IsNazivNull() ? "" : knjiga1.Naziv;
                return;
            }

            try
            {
                SkolskaBibliotekaDataSet.KnjigaRow knjiga = skolskaBibliotekaDataSet.Knjiga.NewKnjigaRow();
                knjiga.KnjigaID = sifra;
                knjiga.UDK = txtUDK.Text;
                knjiga.ISBN = txtISBN.Text;
                knjiga.Naziv = txtNaziv.Text;

                skolskaBibliotekaDataSet.Knjiga.AddKnjigaRow(knjiga);
                knjigaTableAdapter.Update(skolskaBibliotekaDataSet.Knjiga);
                Util.Info("Uspesno sacuvano u bazu.");
            }
            catch (OleDbException ex)
            {
                Util.Error("Doslo je do greske pri komuniciranju sa bazom.");
                skolskaBibliotekaDataSet.RejectChanges();
            }
            catch (Exception)
            {
                Util.Error("Doslo je do greske.");
            }
        }

        private void BtnObrisi_Click(object sender, EventArgs e)
        {
            short sifra = short.Parse(txtSifra.Text);

            SkolskaBibliotekaDataSet.KnjigaRow knjiga = skolskaBibliotekaDataSet.Knjiga.FindByKnjigaID(sifra);
            if (knjiga == null)
            {
                Util.Error("Trazena knjiga ne postoji.");
                return;
            }

            foreach (var row in knjiga.GetNapisaliRows())
                row.Delete();

            try
            {
                knjiga.Delete();
                knjigaTableAdapter.Update(skolskaBibliotekaDataSet.Knjiga);
                Util.Info("Knjiga je uspesno obrisana.");
            }
            catch (OleDbException ex)
            {
                Util.Error("Doslo je do greske pri komuniciranju sa bazom.");
                skolskaBibliotekaDataSet.RejectChanges();
                throw ex;
            }
            catch (Exception)
            {
                Util.Error("Doslo je do greske.");
            }
        }

        private void BtnIzmeni_Click(object sender, EventArgs e)
        {
            short sifra = short.Parse(txtSifra.Text);

            SkolskaBibliotekaDataSet.KnjigaRow knjiga = skolskaBibliotekaDataSet.Knjiga.FindByKnjigaID(sifra);
            if (knjiga == null)
            {
                Util.Error("Trazena knjiga ne postoji u bazi.");
                return;
            }

            try
            {
                knjiga.BeginEdit();
                knjiga.UDK = txtUDK.Text;
                knjiga.ISBN = txtISBN.Text;
                knjiga.Naziv = txtNaziv.Text;
                knjiga.EndEdit();
                knjigaTableAdapter.Update(knjiga);
                Util.Info("Promene su uspesno sacuvane.");
            }
            catch (OleDbException)
            {
                Util.Error("Doslo je do greske pri komuniciranju sa bazom.");
                skolskaBibliotekaDataSet.RejectChanges();
            }
            catch (Exception)
            {
                Util.Error("Doslo je do greske.");
            }
        }
    }
}
